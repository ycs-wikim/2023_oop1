// 04_19.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// 구조체 : 다양한 자료형을 한번에 선언 Vs. 배열
// 구조체 선언 : 예약어 구조체이름 { 자료형 선언; 자료형 선언; ... };
struct asdf
{
    int x;              // 0
    char c1;            // 4
    int y;              // 5
    char str[16];       // 9
    int z;              // 25
};
// 구조체 변수 선언 : 예약어 구조체이름 구조체변수이름;
struct asdf gg;


int main()
{
    // 구조체는 동일 자료형이 아니기 때문에 배열의 a[3] 형식을 사용 X
    // 연산자를 통해 구조체 내부 변수에 접근할 수 있다.
    // 1. . : 직접 멤버 연산자 - 일반 변수
    // 2. -> : 간접 멤버 연산자 - 포인터 변수
    

    // 레퍼런스
    int t = 9;
    int& r = t;
    int& r1 = r;
    //int& k = 99;        // 레퍼런스 변수는 반드시 변수로 초기화
    //int& u;             // 레퍼런스 변수는 반드시 변수로 초기화
    const int& kkk = 99;    // const로 초기화한 레퍼런스 변수 사용 가능
                            // const 예약어에 의해 상수화
    //kkk = 887;            // 상수이기 때문에 값 대입이 불가능
    printf("1 : %d\n", t);
    r = 99;
    printf("2 : %d\n", t);
    r1 = 199;
    printf("3 : %d\n", t);

    // 다중 포인터
    int y = 99;
    int* p1 = &y;       // 나의 자료형 int* 면, 받을 수 있는 주소의 변수 일반변수
    int** p2 = &p1;     // int** = int*
    int*** p3 = &p2;    // int*** = int**
    int**** p4 = &p3;   // int**** = int***
    int***** p5 = &p4;  // int***** = int****
    printf("Y : %d - %d - %d - %d - %d - %d\n",
        y, *p1, **p2, ***p3, ****p4, *****p5);
    printf("Y : %p - %p - %p - %p - %p - %p\n",
        &y, p1, *p2, **p3, ***p4, ****p5);
    // 다중 포인터의 규칙
    /*
    * 1. 선언한 변수의 *의 개수보다 1개 작은 * 변수의 주소를 받는다.
    * 2. 값에 접근하려면 자신의 *의 개수만큼 붙여서 사용한다.
    * 3. 다음 주소 이동 시, *을 하나씩 제외하면 결국 일반 변수가 된다.
    * 
    * y == *p1;
    * y == *p1 == **p2;
    * y == *p1 == **p2 == ***p3;
    * y == *p1 == **p2 == ***p3 == ****p4;
    * y == *p1 == **p2 == ***p3 == ****p4 == *****p5;
    */



    int a = 34;
    // void*의 용도 : 특정 주소를 가리키기 위해 사용한다.
    //      외부에 정보를 보여주고 싶지 않은경우에도 많이 사용
    void* k = (void*)&a;        // 주소 값 획득
    printf("VOID : %p - %p\n", &a, k);
    //*k = 3;                   // 연산 불가능
    //printf("k : %d\n", *k);   // 값에 대한 접근

    int* ui = NULL;         // C언어에서 포인터를 초기화하는 가장 좋은 방법
    //*ui = 9;          // OS 영역에 접근하면, OS가 프로그램을 임의 종료
    int* ui2 = nullptr;     // C++에서 포인터를 초기화하는 방법


    int b = 234;
    int c = 987;
    int d = 2387;
    int* vp = &a;
    printf("ptr : %p %p %p %p\n", &a, &b, &c, &d);
    printf("VP : %d %d %p\n", a, *vp, vp);
    vp += 8;
    printf("VP : %d %d %p\n", b, *vp, vp);
    vp += 8;
    printf("VP : %d %d %p\n", c, *vp, vp);
    vp += 8;
    printf("VP : %d %d %p\n", d, *vp, vp);
}
